// Copyright © 2015 Corel Corporation.
// 
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying 
// documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute, and transmit the Software, 
// and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all 
// subject to the following:
// 
// The copyright notices in the Software and this entire statement, including the above license grant, the original location it was 
// downloaded from, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, 
// and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object 
// code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. THE SOFTWARE MAY CONTAIN BUGS, ERRORS AND OTHER 
// PROBLEMS THAT COULD CAUSE SYSTEM FAILURES AND THE USE OF SUCH SOFTWARE IS ENTIRELY AT THE USER’S RISK. IN NO EVENT SHALL THE 
// COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR 
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Corel.Interop.VGCore;
using cdrPluginT;
using System.Windows.Forms;
using cdrPluginT.Properties;
using System.Diagnostics;

namespace CGS
{
    public class Addon
    {

        private static String CommandID = "tisnplugin1";
        private static String CommandID_TOJPG = "tisnplugin_导出图片";
        private static String CommandID_COLORCHANGE = "tisnplugin_颜色转换";
        private static String CommandID_COMPRESSTEXT = "tisnplugin_压缩标点";
        private static String CommandID_CONVERTTO = "tisnplugin_文字转曲";
        private static String CommandID_PSTOCOREL = "tisnplugin_一键PS";
        private static String CommandID_CROPMARK = "tisnplugin_裁切线";
        private static String CommandID_HIDE = "tisnplugin_隐藏";
        private static String BarName = "tisn2015";


        private frmToJPG frm_ToJPG;
        private frmMain frm_Main;
        private frmColorReplace frm_ColorReplace;
        private frmCompressText frm_CompressText;
        private frmConvertTo frm_ConvertTo;
        private frmPStoCurve frm_PStoCurve;
        private frmCropMark frm_CropMark;


        private Corel.Interop.VGCore.Application application;

        ///<summary>
        /// Constructor for the Addon.  This is called by CorelDRAW or Corel DESIGNER when it is discovered.
        ///</summary>
        public Addon(Corel.Interop.VGCore.Application application)
        {

            this.application = application;
            application.OnPluginCommand += application_OnPluginCommand;
            application.OnUpdatePluginCommand += application_OnUpdatePluginCommand;
            application.OnApplicationEvent += application_OnApplicationEvent;
            application.Start += application_Start;
            application.DocumentOpen += application_DocumentOpen;
            application.DocumentBeforeSave += application_DocumentBeforeSave;
            // Create and register our tool
            //ToolState toolState = new CGS.cdrPluginT(Application);
            //Application.RegisterToolState("c7722bb4-c835-4aec-b257-17d3370badae", "cdrPluginT", toolState);

            bool exists = false;
            foreach (CommandBar cmb in application.FrameWork.CommandBars)
            {
                if (cmb.Name.Equals(BarName))
                {
                    //cmb.Delete();
                    exists = true;
                    break;
                }
            }
            application.AddPluginCommand(CommandID, "全能插件", "全能插件");
            application.AddPluginCommand(CommandID_TOJPG, "导出图片", "导出图片");
            application.AddPluginCommand(CommandID_COLORCHANGE, "颜色替换", "颜色替换");
            application.AddPluginCommand(CommandID_COMPRESSTEXT, "压缩标点", "压缩标点");
            application.AddPluginCommand(CommandID_CONVERTTO, "文字转曲", "文字转曲");
            application.AddPluginCommand(CommandID_PSTOCOREL, "一键PS", "一键PS");
            application.AddPluginCommand(CommandID_CROPMARK, "裁切线", "裁切线");
            if (!exists)
            {
                //CommandBar cb = application.FrameWork.CommandBars[BarName];
                //cb.Protection = cuiBarProtection.cuiBarNoMove;
                /*
                CommandBar cb = application.FrameWork.CommandBars.Add(BarName, cuiBarPosition.cuiBarFloating, false);


                Corel.Interop.VGCore.Control c = cb.Controls.AddCustomButton("ab489730-8791-45d2-a825-b78bbe0d6a5d", CommandID);


                Corel.Interop.VGCore.Control c1 = cb.Controls.AddCustomButton("ab489730-8791-45d2-a825-b78bbe0d6a5d", CommandID_TOJPG);
                c1.SetIcon2(@"guid://c7722bb4-c835-4aec-b257-17d3370badae");

                Corel.Interop.VGCore.Control c2 = cb.Controls.AddCustomButton("ab489730-8791-45d2-a825-b78bbe0d6a5d", CommandID_COLORCHANGE);
                c2.SetIcon2(@"guid://5b1309be-b43e-4611-9492-b09308a77699");

                Corel.Interop.VGCore.Control c3 = cb.Controls.AddCustomButton("ab489730-8791-45d2-a825-b78bbe0d6a5d", CommandID_COMPRESSTEXT);
                */
            }


        }

        void application_DocumentBeforeSave(Document Doc, bool SaveAs, string FileName)
        {
            if (Settings.Default.删除视图样式_文档保存时)
            {
                //DeleteViews(Doc);
            }
            if (Settings.Default.删除符号_文档保存时)
            {
                //DeleteSymbols(Doc);
            }
        }

        void application_DocumentOpen(Document Doc, string FileName)
        {
            if (Settings.Default.删除视图样式_文件打开时)
            {
                //DeleteViews(Doc);
            }
            if (Settings.Default.删除符号_文档打开时)
            {
                //DeleteSymbols(Doc);
            }
        }
        frmDoing frm_Doing;
        void DeleteViews(Document doc)
        {
            frm_Doing = new frmDoing();
            frm_Doing.DoWork += frm_Doing_DoWork_View;
            frm_Doing.Show();
        }

        void frm_Doing_DoWork_View(frmDoing sender, System.ComponentModel.DoWorkEventArgs e)
        {
            int ac = application.ActiveDocument.Views.Count;
            sender.SetMaxProgress(ac);
            int i = 1;
            foreach (Corel.Interop.VGCore.View v in application.ActiveDocument.Views)
            {
                frm_Doing.SetProgress(i - 1, String.Format("共{0:D}个{1:1}，正在删除第{0:D}个", ac, "视图", i));
                try
                {
                    v.Delete();
                }
                catch
                {

                }
                i++;
            }
        }

        void DeleteSymbols(Document doc)
        {
            foreach (Corel.Interop.VGCore.SymbolDefinition s in doc.SymbolLibrary.Symbols)
            {
                s.Delete();
            }
        }

        void DeleteColorPattern(Document doc)
        {
        }

        void application_Start()
        {
            if (application.VersionMajor == 17)
            {
                String tp = application.CorelScriptTools().GetTempFolder() + "tisn2015.cdws";
                FileStream fs = new FileStream(tp, FileMode.Create); ;
                fs.Write(Resources.tisn2015, 0, Resources.tisn2015.Length);
                fs.Flush();
                fs.Close();
                application.ImportWorkspace(tp);
                File.Delete(tp);
            }
            else if (application.VersionMajor == 18)
            {
                String tp = application.CorelScriptTools().GetTempFolder() + "tisn2016.cdws";
                FileStream fs = new FileStream(tp, FileMode.Create); ;
                fs.Write(Resources.tisn2016, 0, Resources.tisn2016.Length);
                fs.Flush();
                fs.Close();
                application.ImportWorkspace(tp);
                File.Delete(tp);
            }
        }

        private bool hasDoc = false;
        void application_OnApplicationEvent(string EventName, ref object[] Parameters)
        {
            Debug.WriteLine(EventName);
            if (EventName == "ActiveViewChange")
            {
                if (application.Documents.Count == 0)
                {
                    hasDoc = false;
                }
                else
                {
                    hasDoc = true;
                }
            }
            else if (EventName == "SignalWelcomeScreenClose")
            {
            }
        }

        void application_OnUpdatePluginCommand(string commandID, ref bool Enabled, ref cdrCommandCheckState Checked)
        {
            if (commandID == CommandID || commandID == CommandID_TOJPG || commandID == CommandID_COLORCHANGE || commandID == CommandID_COMPRESSTEXT || commandID == CommandID_CONVERTTO || commandID == CommandID_PSTOCOREL || commandID == CommandID_CROPMARK)
            {
                Enabled = hasDoc;
            }
        }

        private void application_OnPluginCommand(string cID)
        {
            if (cID == CommandID)
            {
                if (frm_Main == null || !frm_Main.Created)
                {
                    frm_Main = new frmMain(application);
                    frm_Main.Show();
                }
                else
                {
                    frm_Main.Activate();
                }
            }
            else if (cID == CommandID_TOJPG)
            {
                if (frm_ToJPG == null || !frm_ToJPG.Created)
                {
                    frm_ToJPG = new frmToJPG(application);
                    frm_ToJPG.Show();
                }
                else
                {
                    frm_ToJPG.Activate();
                }
            }
            else if (cID == CommandID_COLORCHANGE)
            {
                if (frm_ColorReplace == null || !frm_ColorReplace.Created)
                {
                    frm_ColorReplace = new frmColorReplace(application);
                    frm_ColorReplace.Show();
                }
                else
                {
                    frm_ColorReplace.Activate();
                }
            }
            else if (cID == CommandID_COMPRESSTEXT)
            {
                if (frm_CompressText == null || !frm_CompressText.Created)
                {
                    frm_CompressText = new frmCompressText(application);
                    frm_CompressText.Show();
                }
                else
                {
                    frm_CompressText.Activate();
                }
            }
            else if (cID == CommandID_CONVERTTO)
            {

                if (frm_ConvertTo == null || !frm_ConvertTo.Created)
                {
                    frm_ConvertTo = new frmConvertTo(application);
                    frm_ConvertTo.Show();
                }
                else
                {
                    frm_ConvertTo.Activate();
                }
            }
            else if (cID == CommandID_PSTOCOREL)
            {

                if (frm_PStoCurve == null || !frm_PStoCurve.Created)
                {
                    frm_PStoCurve = new frmPStoCurve(application);
                    frm_PStoCurve.Show();
                }
                else
                {
                    frm_PStoCurve.Activate();
                }
            }
            else if (cID == CommandID_CROPMARK)
            {
                if (frm_CropMark == null || !frm_CropMark.Created)
                {
                    frm_CropMark = new frmCropMark(application);
                    frm_CropMark.Show();
                }
                else
                {
                    frm_CropMark.Activate();
                }
            }
        }
    }
}
